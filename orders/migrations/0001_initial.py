# Generated by Django 3.2.18 on 2023-09-24 06:24

import accounts.validators
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('vendor', '0001_initial'),
        ('store', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=50)),
                ('address_line_1', models.CharField(max_length=300)),
                ('unit_no', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('pin_code', models.CharField(blank=True, max_length=6, null=True)),
                ('order_note', models.CharField(blank=True, max_length=100)),
                ('order_total', models.FloatField()),
                ('total_data', models.JSONField(blank=True, null=True)),
                ('total_weight', models.JSONField(blank=True, null=True)),
                ('tax_data', models.JSONField(blank=True, null=True)),
                ('tax', models.FloatField()),
                ('status', models.CharField(choices=[('New', 'New'), ('Packed', 'Packed'), ('ReadyToShip', 'ReadyToShip'), ('PickedUpToDeliver', 'PickedUpToDeliver'), ('Completed', 'Completed'), ('Delivered', 'Delivered'), ('Cancelled by Buyer', 'Cancelled by Buyer'), ('Cancelled by Seller', 'Cancelled by Seller'), ('Return/Refund', 'Return/Refund')], default='New', max_length=20)),
                ('ip', models.CharField(blank=True, max_length=20)),
                ('is_ordered', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('being_delivered', models.BooleanField(default=False)),
                ('received', models.BooleanField(default=False)),
                ('refund_requested', models.BooleanField(default=False)),
                ('refund_granted', models.BooleanField(default=False)),
                ('ref_code', models.CharField(max_length=30)),
                ('total_shipping_charge', models.FloatField(blank=True, null=True)),
                ('total_quantity', models.IntegerField()),
                ('parcel_data', models.JSONField(blank=True, null=True)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('cancellation_reason', models.CharField(blank=True, max_length=150, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('product_price', models.FloatField()),
                ('ordered', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('being_delivered', models.BooleanField(default=False)),
                ('received', models.BooleanField(default=False)),
                ('refund_requested', models.BooleanField(default=False)),
                ('refund_granted', models.BooleanField(default=False)),
                ('refund_processed', models.BooleanField(default=False)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('cust_refund_for_cancelitem', models.FloatField(default=0)),
                ('ref_code', models.CharField(max_length=30)),
                ('message', models.TextField(blank=True, null=True)),
                ('accepted', models.BooleanField(default=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('status', models.CharField(choices=[('New', 'New'), ('Packed', 'Packed'), ('ReadyToShip', 'ReadyToShip'), ('PickedUpToDeliver', 'PickedUpToDeliver'), ('Completed', 'Completed'), ('Cancelled by Buyer', 'Cancelled by Buyer'), ('Cancelled by Seller', 'Cancelled by Seller'), ('Return/Refund', 'Return/Refund'), ('Return Requested', 'Return Requested')], default='New', max_length=50)),
                ('SLA_Extension', models.IntegerField(blank=True, null=True)),
                ('sla_ext_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.CharField(blank=True, max_length=150, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderUpdate',
            fields=[
                ('update_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_id', models.CharField(default='', max_length=50)),
                ('update_desc', models.CharField(max_length=5000)),
                ('timestamp', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(blank=True, default=0, null=True)),
                ('product_total_weight', models.IntegerField(blank=True, default=0, null=True)),
                ('product_price', models.FloatField(blank=True, default=0, null=True)),
                ('total_product_amount', models.FloatField(blank=True, default=0, null=True)),
                ('additional_information', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('ref_code', models.CharField(max_length=30)),
                ('terms_accepted', models.BooleanField(default=False)),
                ('return_pickup_date', models.DateField(blank=True, null=True)),
                ('returnback_pickup_date', models.DateField(blank=True, null=True)),
                ('return_status', models.CharField(blank=True, max_length=60, null=True)),
                ('refund_title', models.CharField(blank=True, max_length=200, null=True)),
                ('buyer_return_status', models.CharField(blank=True, max_length=60, null=True)),
                ('return_date', models.DateTimeField(blank=True, null=True)),
                ('seller_payment', models.FloatField(blank=True, default=0, null=True)),
                ('buyer_payment', models.FloatField(blank=True, default=0, null=True)),
                ('refund_status', models.CharField(blank=True, max_length=30, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('partial_offer_amount', models.FloatField(blank=True, null=True)),
                ('partial_offer_cnt', models.IntegerField(blank=True, default=0, null=True)),
                ('counter_amount', models.FloatField(blank=True, default=0, null=True)),
                ('returned_item_toseller', models.BooleanField(default=False)),
                ('returned_item_tobuyer', models.BooleanField(default=False)),
                ('transaction_fees', models.FloatField(blank=True, null=True)),
                ('platform_fees', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Return_main_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mainreason', models.CharField(choices=[('I have received my items but there are issues', 'I have received my items but there are issues'), ('I didn’t receive my items', 'I didn’t receive my items')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='VendorPayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_duration', models.CharField(max_length=30)),
                ('shipchargepaid_by_cust', models.FloatField(default=0)),
                ('shipcharge_to_seller', models.FloatField(default=0)),
                ('amt_paid_by_customer', models.FloatField(default=0)),
                ('completed_item_amt', models.FloatField(default=0)),
                ('cancelled_item_amt', models.FloatField(default=0)),
                ('processed_flag', models.BooleanField(default=False)),
                ('items_amount', models.FloatField(default=0)),
                ('stripe_transaction_fees', models.FloatField(default=0)),
                ('platform_fees', models.FloatField(default=0)),
                ('total_vendor_payout', models.FloatField(default=0)),
                ('total_customer_payout', models.FloatField(default=0)),
                ('is_ordered', models.BooleanField(default=False)),
                ('total_shipping_payout', models.FloatField(default=0)),
                ('cust_refund_for_returnitem', models.FloatField(default=0)),
                ('cancelled_item_data', models.JSONField(blank=True, null=True)),
                ('return_item_data', models.JSONField(blank=True, null=True)),
                ('cust_refund_for_cancelitem', models.FloatField(default=0)),
                ('return_cust_ship_fees', models.BooleanField(blank=True, null=True)),
                ('payout_status', models.CharField(choices=[('Refunded', 'Refunded'), ('Succeed', 'Succeed'), ('Pending', 'Pending')], default='New', max_length=20)),
                ('exclude_seller_ship_platform_fees', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_date', models.DateField(default=datetime.datetime.now)),
                ('order_status', models.CharField(blank=True, max_length=20, null=True)),
                ('process_flag', models.BooleanField(default=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('actual_shipping_cost', models.FloatField(default=0)),
                ('parcel_weight', models.FloatField(default=0)),
                ('calc_shipcharge_cust', models.FloatField(default=0)),
                ('calc_shipcharge_seller', models.FloatField(default=0)),
                ('shipping_adjustment', models.FloatField(default=0)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.order')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vendor.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='ReturnDispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispute_reason', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('videofile', models.FileField(blank=True, null=True, upload_to='dispute/videos', validators=[accounts.validators.file_size])),
                ('videopod', models.FileField(blank=True, null=True, upload_to='dispute/videos', validators=[accounts.validators.file_size])),
                ('refund', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.refund')),
            ],
        ),
        migrations.CreateModel(
            name='Return_VendorPayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipchargepaid_by_cust', models.FloatField(default=0)),
                ('shipcharge_to_seller', models.FloatField(default=0)),
                ('amt_paid_by_customer', models.FloatField(default=0)),
                ('items_amount', models.FloatField(default=0)),
                ('stripe_transaction_fees', models.FloatField(default=0)),
                ('platform_fees', models.FloatField(default=0)),
                ('is_ordered', models.BooleanField(default=False)),
                ('buyer_payment_amt', models.FloatField(default=0)),
                ('seller_payment_amt', models.FloatField(default=0)),
                ('item_returned_back_toBuyer', models.JSONField(blank=True, null=True)),
                ('item_returned_toSeller', models.JSONField(blank=True, null=True)),
                ('item_refund_without_return', models.JSONField(blank=True, null=True)),
                ('cancelled_item_data', models.JSONField(blank=True, null=True)),
                ('return_rejected_data', models.JSONField(blank=True, null=True)),
                ('payout_status', models.CharField(choices=[('Paid', 'Paid'), ('Pending', 'Pending')], default='New', max_length=20)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_date', models.DateField(default=datetime.datetime.now)),
                ('returned_status', models.JSONField(blank=True, null=True)),
                ('order_status', models.CharField(blank=True, max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('actual_shipping_cost', models.FloatField(default=0)),
                ('calc_shipcharge_cust', models.FloatField(default=0)),
                ('calc_shipcharge_seller', models.FloatField(default=0)),
                ('shipping_adjustment', models.FloatField(default=0)),
                ('total_vendor_payout', models.FloatField(default=0)),
                ('total_customer_payout', models.FloatField(default=0)),
                ('total_shipping_payout', models.FloatField(default=0)),
                ('return_exists', models.BooleanField(default=False)),
                ('parcel_weight_toseller', models.JSONField(blank=True, null=True)),
                ('parcel_weight_tobuyer', models.JSONField(blank=True, null=True)),
                ('return_item_toseller_flag', models.BooleanField(default=False)),
                ('return_item_tobuyer_flag', models.BooleanField(default=False)),
                ('process_flag', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.order')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vendor.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Return_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=100, null=True)),
                ('main_reason', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.return_main_reason')),
            ],
        ),
        migrations.CreateModel(
            name='RefundImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50)),
                ('image', models.FileField(blank=True, null=True, upload_to='image/refund', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png', 'jpeg']), accounts.validators.validate_file_mimetype])),
                ('refund', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.refund')),
            ],
        ),
        migrations.AddField(
            model_name='refund',
            name='main_reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.return_main_reason'),
        ),
        migrations.AddField(
            model_name='refund',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.order'),
        ),
        migrations.AddField(
            model_name='refund',
            name='orderproduct',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.orderproduct'),
        ),
        migrations.AddField(
            model_name='refund',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.product'),
        ),
        migrations.AddField(
            model_name='refund',
            name='reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.return_reason'),
        ),
        migrations.AddField(
            model_name='refund',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='refund',
            name='variant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.variants'),
        ),
        migrations.AddField(
            model_name='refund',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vendor.vendor'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=100)),
                ('payment_method', models.CharField(max_length=100)),
                ('amount_paid', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='payment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.payment'),
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.product'),
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='variant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.variants'),
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='variations',
            field=models.ManyToManyField(blank=True, to='store.Variation'),
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vendor.vendor'),
        ),
        migrations.AddField(
            model_name='order',
            name='payment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.payment'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='order',
            name='vendors',
            field=models.ManyToManyField(blank=True, to='vendor.Vendor'),
        ),
        migrations.CreateModel(
            name='DisputeImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(blank=True, null=True, upload_to='dispute/images', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png', 'jpeg']), accounts.validators.validate_file_mimetype])),
                ('refund', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orders.refund')),
            ],
        ),
    ]
